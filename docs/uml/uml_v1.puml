@startuml
class VoyaTrip

class Ui{
    + run(): void
}

class Parser {
    - currentPage: String
    - currentTrip: String
    + Parser()
    + setCurrentPage(page: String): void
    + setCurrentTrip(trip: String): void
    + parse(command: String): Command
    - extractCommandArgument(command: String): String
    - extractCommandAction(command: String): String
    - extractCommandTargetType(command: String): String
    - matchCommand(commandAction: String, commandTargetType: String, rawArgument: String): Command
}

class Trip{
    - destination: String
    - totalBudget: Integer
    - numDays: Integer
    + Trip(destination: String, startDate: String, endDate: String, totalBudget: Integer)
    + addItinerary(day: Integer, name: String, budget: Integer): void
    + addAccommodation(name: String, budget: Integer): void
    + deleteAccommodation(index: Integer): void
    + addTransportation(mode: String, budget: Integer): void
    + deleteTransportation(index: Integer): void
    + toString(){redefines toString()}: String
}

class LocalDate

abstract class Command {
    - keyword: String
    + Command(keyword: String)
    + getKeyword(): String
    + equals(Object o): Boolean
    # splitByDoubleHyphen(command: String): String[]
    # processRawArgument(rawArgument: String): void
    # matchArgument(argument: String): void {abstract}
}

class AccommodationCommand extends Command {
    - trip: String
    - name: String
    - budget: Integer
    - index: Integer
    + AccommodationCommand(keyword: String, trip: String, rawArgument: String)
    + getTrip(): String
    + getName(): String
    + getBudget(): Integer
    + getIndex(): Integer
    # matchArgument(argument: String): void
}

class TransportationCommand extends Command {
    - trip: String
    - name: String
    - mode: String
    - budget: Integer
    - index: Integer
    + TransportationCommand(keyword: String, trip: String, rawArgument: String)
    + getTrip(): String
    + getName(): String
    + getMode(): String
    + getBudget(): Integer
    + getIndex(): Integer
    # matchArgument(argument: String): void
}

class ItineraryCommand extends Command {
    - trip: String
    - name: String
    - time: String
    - budget: Integer
    - day: Integer
    + ItineraryCommand(keyword: String, trip: String, rawArgument: String)
    + getTrip(): String
    + getName(): String
    + getTime(): String
    + getBudget(): Integer
    + getDay(): Integer
    # matchArgument(argument: String): void
}

class TripCommand extends Command {
    - trip: String
    - name: String
    - budget: Integer
    - index: Integer
    + TripCommand(keyword: String, trip: String, rawArgument: String)
    + getTrip(): String
    + getName(): String
    + getBudget(): Integer
    + getIndex(): Integer
    # matchArgument(argument: String): void
}

exception IOException

exception InvalidCommand extends IOException

class Day{
    - budget: Integer
    + Day()
    + addActivity(name: String, budget Integer): void
    + toString(){redefines toString()}: String
}

class Activity{
    - name: String
    - time: String
    + Activity(name: String, time: Integer)
    + toString(){redefines toString()}: String
}

class Accommodation{
    - name: String
    - budget: Integer
    + Accommodation(name: String, budget: Integer)
    + toString(){redefines toString()}: String
}

class Transportation{
    - mode: String
    - budget: Integer
    + Transportation(mode: String, budget: Integer)
    + toString(){redefines toString()}: String
}

VoyaTrip --> "*" Trip : - trips: ArrayList<Trip>
VoyaTrip *-- "1" Ui : -ui

Ui --> "0..1" Command : -command
Ui --> "*" Trip : - trips: ArrayList<Trip>
(Ui, Command) .. Parser

Parser - InvalidCommand : > throw

Trip --> "1" LocalDate : - startDate
Trip --> "1" LocalDate : - endDate
Trip --> "0..numDays" Day : - itineraries: ArrayList<Day>
Day --> "*" Activity : - activities: ArrayList<Activity>
Trip --> "*" Accommodation : - accommodations: ArrayList<Accommodation>
Trip --> "*" Transportation : - transportations: ArrayList<Transportation>


@enduml